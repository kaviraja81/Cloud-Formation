Resources:
  VPCEC2Te:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: VPC-EC2T2Micro

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCEC2Te
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key : Name
          Value: PublicSubnet 1
  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCEC2Te
      AvailabilityZone: !Select [ 1 , !GetAZs '']
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key : Name
          Value: PublicSubnet 2

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCEC2Te
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key : Name
          Value: Private Subnet 1
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPCEC2Te
      AvailabilityZone: !Select [ 1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key : Name
          Value: Private Subnet 2
  #Creating an Internet Gateway and attaching the I/G to VPC created
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPCEC2Te
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPCEC2Te
      InternetGatewayId: !Ref InternetGateway

  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId:  !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}


  # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCEC2Te
      Tags:
        - Key: Name
          Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCEC2Te
      Tags:
        - Key: Name
          Value: Private
  PrivateRoute1:
    Type:  AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

# Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
#Outputs the VPC id and the PublicSubnet id
Outputs:
  VPCName :
    Value: !Ref VPCEC2Te
  PublicSubnet :
    Value: !Ref PublicSubnet1
